@model IEnumerable<CY_Project.ViewModels.PresentViewModel>

@using System;
@using System.Text.RegularExpressions;

@{


    try
    {
        //顯示病歷時間
        var groups = Model.GroupBy(x => x.yyyyDate).ToList();
        foreach (var i in groups)
        {
            <p>病歷時間: @i.Key</p>
        }

        //停字表
        string[] stopWordList = { "not", "nor", "doing", "or", "until", "yours", "does", "against", "am", "have", "in", "you're", "this", "shan", "ourselves", "such", "all", "isn't", "ll", "didn", "she's", "shan't", "did", "above", "wasn", "where", "don", "the", "when", "to", "then", "won", "from", "didn't", "my", "these", "it", "me", "for", "into", "yourself", "yourselves", "at", "doesn", "each", "haven", "re", "they", "hadn't", "ours", "ve", "that", "as", "on", "after", "wasn't", "why", "but", "is", "there", "couldn't", "we", "t", "down", "should", "very", "myself", "of", "a", "because", "theirs", "o", "you'll", "so", "should've", "just", "mustn", "hers", "do", "he", "had", "d", "hadn", "hasn't", "with", "him", "whom", "off", "only", "under", "out", "an", "wouldn't", "will", "you", "has", "what", "if", "over", "mustn't", "during", "before", "our", "i", "their", "both", "other", "himself", "which", "ain", "m", "than", "be", "up", "through", "being", "that'll", "were", "further", "most", "mightn", "below", "isn", "same", "and", "mightn't", "again", "who", "more", "can", "your", "any", "s", "once", "it's", "no", "was", "ma", "some", "weren't", "needn", "y", "her", "those", "itself", "weren", "you'd", "aren't", "them", "doesn't", "needn't", "by", "won't", "its", "own", "been", "his", "few", "hasn", "about", "shouldn't", "while", "now", "couldn", "themselves", "how", "aren", "are", "here", "she", "between", "having", "herself", "shouldn", "too", "wouldn", "you've", "haven't", "don't" };
        object[] questionMarkList = { '!', '"', '#', '$', '%', '&', '\'', '/', '▽', '■', '★', '○', '(', ')', '*', '+', ',', '-', '.', '＼', '＼', '／', ':', ';', '<', '=', '>', "**", "***", "****", "*****", "******", "*******", '?', '@', '[', '\\', ']', '^', '_', '`', '{', '│', '}', '~', '；', '﹔', '︰', '﹕', " :", '，', '﹐', '、', '．', '﹒', '˙', '·', '。', '？', '！', '～', '‥', '‧', '′', '〃', '〝', '〞', '‵', '‘', '’', '『', '』', '「', "plan", "01", "02", "03", "04", "05", '」', '“', '”', '…', '❞', '❝', '﹁', '﹂', '﹃', "--", '﹄' };
        string[] titleName = { "-Therapeutic", "-Diagnostic", "-Educational", "Subjective", "Objective", "Assessment", "Consciousness:", "Plan", "Diagnostic", "Therapeutic", "Educational", "Educationa", "Education", "Problem", "Complaints", "Present", "Illness" };
        string[] soapName = { "S", "O", "A", "P", "s", "o", "a", "p" };

        var nameCount = 0;
        var nameState = 0;
        int[] nameStateArray = new int[1000];

        Dictionary<string, string> dict321 = new Dictionary<string, string>()
{
            {"1550102400000", "" },
            {"1550183580000", "" },
            {"1550219580000","15@17@19@37@39@43@45@46@50@52@53@54@56@58@63@65@66@68@69@70@71@84@85@89@91@92@94@116@117" },
            {"1550311260000", "7@8@19@21@23@24@25@26@27@28@29@31@83@84@88@89@101@102@103@105@107@108@110@136@137@221@222@252@253@264@265@279@280@281@282@287@289@291@293@294@295@296@297@298@299@300@308@309@311@312@316@317@318@319@320@321@322@323@324"},
            {"1550400600000", "2@4@6@7@14@16@17@19@20@21@23@25@27@28@29@30@31@32@33@34@36@37@38@39@40@42@45@47@48@49@50@54@56@57@58@60@61@62@64@65@66@70@72@73@74@78@80@81@84@87@88@89@91@92@93@94@96@98@99@101@102@116@117@118@120@122@123@125@127@128@129@130@131@134@135@137@140@141@142@144@145@146@147@148@150@151@152@156@157@159@162@163@164@165@166@167@170@172@175@177@183@184@190@191@203@204@220@221@222@223@224@226@227@228@229@230@232@233@234@235@237@238@240@241@242@243@244@245@247@248@249@251@252@253@254@255@256@257@258@259@260@261@263@264@266@267@270@272@274@275@276@278@281@283@284@285@286@287@288@290@293@295@296@297@299@300@301@302@304@305@308@309@311@312@314@315@317@319@320@330@332@334@336@337@338@339@340@341@342@343@345@349@350@352@353@355@356@357@360@361@362@363@364@365"},
            {"1550478600000", "2@3@5@7@9@11@12@14@16@19@21@23@25@26@27@28@29@30@31@33@34@36@40@42@43@44@46@48@49@51@52@53@55@57@58@60@61@62@64@65@67@68@69@70@71@72@77@78@80@81@83@87@89@91@93@94@96@98@100@101@102@103@105@106@107@108@109@111@112"},
            {"1550485980000", "1@2@4@7@9@10@12@13@14@16@18@20@21@22@23@24@25@26@28@29@30@31@32@34@37@39@40@41@42@45@46@48@49@50@52@53@54@56@57@58@62@64@65@66@69@70@72@73@76@79@80@81@83@84@85@86@88@90@91@93@94@95@96@99@101@108@109@158@160@169@171@176@177@178@180@182@183@185@188@189@190@196@197@199@211@213@217@218@220@225@226@233@235@241@242@243@244@245@247@248@249@250@251@253@254@255@256@258@259@261@262@263@264@265@266@268@269@270@272@273@274@275@276@277@278@279@280@281@282@284@285@287@288@291@293@295@296@297@298@299@301@302@303@304@305@306@307@308@310@313@315@316@317@318@319@320@322@325@327@328@329@336@337@338@341@342@345@346@348@349@351@352@359@360@369@371@373@375@376@377@378@379@380@381@383@384@385@387@388@390@391@392"},
            {"1550565000000", "0@2@3@5@6@7@9@11@12@14@16@19@21@23@25@26@27@28@29@30@31@33@34@36@40@42@43@44@46@48@49@51@52@53@55@57@58@60@61@62@64@65@67@68@69@70@71@72@77@78@80@81@83@85@86@87@89@91@93@94@96@100@102@103@104@105@107@108"},
            {"1550667420000", "6@8@10@13@15@17@19@20@21@22@23@24@25@26@28@29@31@35@37@38@39@41@42@44@45@46@48@50@52@53@55@56@58@59@60@61@62@63@68@69@71@72@74@75@77@79@81@82@84@85@86@87"},
            {"1550747640000", "3@4@6@8@10@11@13@14@15@17@19@21@22@23@24@25@26@27@28@30@31@32@33@34@36@39@41@42@43@44@47@48@50@51@52@54@55@56@58@59@60@64@66@67@68@71@72@74@75@78@82@84@85@86@87@89@91@92@94@95@96@97@100@102@104@106@107@108@109@110@113@114@115@117@119@120@122@154@155@157@163@164@202@204@208@209@211@216@217@218@219@221@223@224@226@230@231@232@233@234@236@237@238@239@240@242@243@244@245@247@248@250@251@252@253@254@255@257@258@259@261@262@263@264@265@266@267@268@269@270@271@273@274@276@277@280@282@284@285@286@287@288@290@291@299@300@301@302@304@305@309@310@312@313@318@320@321@324@325@328@329@331@332@381@382@388@389@427@428@432@433@439@440@442@443@445@448@449@450@453@454@465@466@469@470@478@480@482@484@485@486@487@488@489@490@491@493@494@495@496@497@498@500@501@502@505@506"},
            {"1550830740000", "4@6@7@9@10@11@13@15@17@18@19@20@21@22@23@24@26@27@28@29@30@32@35@37@38@39@40@43@44@46@47@48@50@51@52@54@55@56@60@62@63@64@67@68@70@71@74@76@77@80@82@83@84@85@87@89@90@92@93@94@95@98@100@107@109@110@111@112@115@116@117@119@121@122@124@127@128@130@131@133@135@136@138@139@140@141@143@144@146@147@149@153@156@157@159@160@162@164@167@168@169@170@172@173@175@177@180@183@184@190@191@193@195@198@201@202@213@215@217@218@220@225@226@228@230@232@234@238@239@240@241@242@244@245@246@247@248@249@251@252@253@254@256@257@258@259@260@262@263@264@266@267@268@269@270@271@272@273@274@275@276@277@278@279@280@281@283@285@286@287@288@289@291@294@296@297@298@299@300@302@304@305@306@307@308@310@313@315@316@319@320@323@324@326@327@329@330@331@332@339@340@343@345@347@349@350@351@352@353@354@355@356@357@358@359@361@362@363@365@366@367@371@374@375@383@384"},
            {"1550916000000", "4@6@7@9@10@11@13@15@17@18@19@20@21@22@23@24@26@27@28@29@30@32@35@37@38@39@40@42@46@48@49@50@52@53@54@56@57@58@62@64@65@66@69@70@72@73@76@78@79@81@82@84@85@86@87@89@91@92@94@95@96@97@100@102@104@105@107@108@109@110@111@114@115@116@118@120@121@123@126@127@129@130@132@134@135@137@138@139@140@142@143@145@146@148@152@155@156@161@162@164@166@169@170@171@172@177@178@179@181@183@189@192@193@194@196@198@201@202@203@204@205@207@208@209@211@213@216@217@218@219@220@225@226@228@240@241@243@254@255@257@260@262@271@272@273@274@276@278@280@288@289@290@291@292@294@295@296@297@298@299@301@302@303@304@306@307@308@309@310@312@313@314@315@316@317@318@319@320@321@322@323@324@325@326@327@328@329@331@334@336@337@338@339@340@342@344@345@346@347@348@350@353@355@356@357@358@359@360@361@363@364@365@366@369@370@371@373@374@376@377@379@380@390@392@394@396@397@398@399@400@401@402@404@405@406@407@409@410@411@413@414@415@422@423"}
        };

        Dictionary<string, string> dict574 = new Dictionary<string, string>()
{
                        { "1550102400000", ""},
                        { "1550224680000", "69@70@71@72@74@76@78@79@80@81@82@83@85@87@88@90@91@92@94@95@96@99@100@101@102@103@104@105@106@109@110@112@117@118@119@120@122@124@126@127@128@129@130@131@133@135@138@139@145@146@147@149@152@154@155@156@158@159@160@161@163@165@170@171@172@173@174@175@177@178@180@182@186@187@188@189@193@194@196@197@198@200@201@204@205@206@207@208@209@214@215@216@218@220@222@224@225@226@228@230@233@235@237@238@239@241@242@244@245@247@248@249@251@252@253@255@256@258@260@284@285@287@288@298@299@311@312@353@354"},
                        { "1550297520000", "18@19@20@21@22@24@30@31@34@35@36@57@58"},
                        { "1550387640000", "0@2@3@7@8@10@11@13@14@16@17@18@19@20@21@22@23@25@26@27@28@30@31@32@34@35@36@37@38@40@41@42@43@44"},
                        { "1550508600000", "3@4@6@8@10@12@13@14@15@16@17@18@19@21@22@24@25@27@28@29@30@31@33@34@35@36@38@39@40@41@43@44@45@46@48@49@51@52@53@55@56@58@59@62@63@64@65@67@69@71@72@73@74@75@76@78@80@81@83@84@85@87@88@89@92@93@94@95@96@97@98@99@102@103@105@110@111@112@113@115@117@119@120@121@122@123@124@126@128@131@132@138@139@140@142@145@147@148@149@151@152@153@154@156@158@163@164@165@166@167@168@170@171@173@175@179@180@181@182@186@187@189@190@191@193@194@197@198@199@200@201@202@207@208@209@211@213@215@217@218@219@221@223@226@227@228@229@230@231@232@233@239@240@244@245@255@256@259@260@261@262@265@267@268@288@289@292@293@297@298@299@306@307@312@313@314@322@323"},
                        { "1550595060000", "6@8@10@12@13@14@15@16@17@18@19@21@22@24@25@27@28@29@30@31@33@34@35@36@38@39@40@41@43@44@45@46@48@49@51@52@53@55@56@58@59@62@63@64@65@67@69@71@72@73@74@75@76@78@80@81@83@84@85@87@88@89@92@93@94@95@96@97@98@99@102@103@105@110@111@112@113@115@117@119@120@121@122@123@124@126@128@131@132@138@139@140@142@145@147@148@149@151@152@153@154@156@158@163@164@165@166@167@168@170@171@173@175@179@180@181@182@186@187@189@190@191@193@194@197@198@199@200@201@202@207@208@209@211@213@215@217@218@219@221@223@226@227@228@229@230@231@232@233@235@239@240@248@249@251@253@255@256@259@260@263@264@265@266@290@291@294@295@296@297@306@308@311@314@317@320@322"},
                        { "1550662440000", "1@2@8@10@12@14@15@16@17@18@19@20@21@23@24@26@29@30@32@33@38@40@45@46@50@51@60@62@65@66@67@68@70@72@74@75@76@77@78@79@81@83@84@86@87@88@90@91@92@95@96@97@98@99@100@101@102@105@106@108@110@111@113@114@117@118@124@125@127@129@131@132@135@136@153@154@157@158@161@162@165@167@169@172@174@177@180@183@186@188"},
                        { "1550749200000", "14@16@18@20@21@22@23@24@25@26@27@29@30@32@33@35@36@38@39@40@41@42@43@44@46@48@49@50@51@52@53@56@57@69@70@86@88@97@98@99@100@102@104@106@107@108@109@110@111@113@115@116@118@119@120@122@123@124@127@128@129@130@131@132@133@134@137@138@140@153@154@162@163@198@200@212@213@222@223@226@227@234@236@237@239@242@244@247@250"},
                        { "1550832480000", "4@6@10@12@13@17@18@19@21@22@23@25@27@28@29@30@31@32@35@36@37@38@41@42@43@44@46@48@50@51@52@53@54@55@57@59@60@62@63@64@66@67@68@71@72@73@74@75@76@77@78@81@82@84@95@96@98@99@101@102@104@105@107@109@110@112@113@118@119@121@122@128@130@131@136@138@139@141@142@163@164@168@169@170@171@172@173@175@176@177@178@179@180@181@196@198@211@212"},
                        { "1550898840000", "7@9@13@14@17@18@19@20@21@22@23@24@26@32@33@36@37@38@48@51"}
                    };

        Dictionary<string, string> dict154 = new Dictionary<string, string>()
{
            {"1550102400000", "" },
            {"1550159040000","3@95@96@97@99@100@101@103@104@106@108@110@111@112@113@168@169@182@183@240@241@242@244" },
            {"1550163120000", "4@6@56@58@59@60@61@62@64@66@68@69@72@78@80@82@83@84@85@87@90@109@110@113@115@116@117@119@120@121@123@124@126@128@130@131@132@133@135@137@139@141@143@144@146@147@149@153@154@155@157@158@160@161@163@166@167@168@169@172@173@174@176@177@178@180@182@183@192@193@204@205@206@207@208@210@213@214@215@216@218@220@221@223@224@225@227@229@230@231@232@233@235@236@237@240@241@242@243@244@248@249@250@251@252@253@254@255@256@257@259@260@262@263@265@266@267@268@270@271@272@274@275@276@277@278@279@280@281@282@283@284@285@286@287@289@290@292@293@296@297@298@299" },
            {"1550227680000", "25@27@34@36@37@39@40@41@42@43@45@47@49@50@53@54@56@57@58@59@61@63@64@65@66@68@71@78@79@130@132@133@134@136@137@138@140@141@143@145@147@148@149@150@152@154@156@161@163@164@170@171@175@177@178@183@184@185@186@189@190@191@192@193@194@195@197@199@200@201@203@205@207@208@209@210@211@212@213@215@217@218@219@221@223@224@225@226@227@229@232@233@234@235@237@239@240" },
            {"1550329380000","4@6@7@9@10@12@13@15@16@17@18@19@21@23@25@26@29@30@32@33@34@35@37@39@40@41@42@44@47@48@51@52@55@56@61@63@65@67@71@73@74@75@77@78@79@81@82@84@86@88@89@90@91@93@95@97@99@101@102@104@105@107@119@120@121@123@124@126@127@129@132@133@134@135@136@137@139@141@142@143@145@146@147@149@152@153@154@155@157@159@160@162@163" },
            {"1550399880000", "9@11@12@14@15@17@18@19@20@21@23@25@27@28@31@32@34@35@36@37@39@41@42@43@44@46@49@50@53@54@57@58@67@69@116@118@119@120@122@124@126@131@133@134@135@137@138@139@141@142@144@146@148@149@150@151@153@155@157@159@161@162@164@165@167@170@171@179@180@181@182@183@184@186@188@189@190@192@193@194@196@199@200@201@202@204@206@207@210@211@212@215@216"},
            {"1550480340000", "12@14@16@18@19@20@21@22@23@24@25@27@33@35@37@38@40@41@42@43@44@46@48@50@51@54@79@81@82@83@84@86@88@89@90@91@93@96@97@100@101@104@105@128@130@131@132@134@135@136@138@139@141@143@145@146@147@148@196@197@210@211@233@234@260@261@262@264@266@267@268@271@272@273@275@278@279@280@281@283@285@286@297@298"},
            {"1550499840000", "1@2@3@4@5@6@8@9@10@11@13@14@18@20@22@24@25@26@27@28@29@30@31@33@35@37@39@41@42@44@45@46@47@48@50@52@54@55@58@59@60@62@65@66@67@68@70@71@73@75@77@79@83@85@87@88@89@90@92@95@96@99@100@103@104@106@107@108@114@116@117@118@120@121@122@124@125@127@129@131@132@133@134@137@138@139@141@142@144@145@146@148@150@151@152@153@155@157@159@161@162@164@165@167@168@170@171@172@173@175@177@178@182@183@184@186@188@189@190@191@192@193@196@197@199@200@201@203@204@206@207@208@210@212@213@215@216@217@219@220@221@222@224@225@226@228@229@231@232@233@234@235@236@238@240@241@243@244@245@247@249@250@251@254@255@256@258@261@262@263@264@266"},
            {"1550551980000", "11@13@15@16@18@20@22@23@24@25@26@27@28@29@31@33@35@37@38@39@40@41@43@45@47@48@51@52@53@55@58@59@60@61@63@64@66@68@70@72@76@78@80@81@82@83@85@88@89@92@93@96@97@99@100@101@106@108@109@110@112@113@114@116@117@119@121@123@124@125@126@129@130@131@133@134@136@137@138@140@142@143@144@145@147@149@151@153@154@156@157@159@160@184@185@186@188@189@191@192@193@195@197@199@200@201@203@204@205@206@208@209@210@212@213@215@216@217@218@219@220@222@224@225@227@228@229@231@233@234@235@238@239@240@242"},
            {"1550564280000", "1@2@3@4@6@8@9@12@14@16@18@19@20@21@22@23@24@25@27@29@31@33@34@35@36@38@40@41@43@44@45@46@47@49@51@53@54@57@58@59@61@64@65@66@67@69@70@72@74@76@78@82@84@85@86@87@89@91@92@93@94@96@99@100@103@104@107@108@110@111@112@116@117@119@125@126@193@195@198@200@202@204@206@208@216@218@219@220@222@223@224@226@227@229@231@233@234@235@236@259@261@271@272@274@275@279@280@283@284@286@287@288@290@300@301@302@304@306@307@308@309@310@311@314@315@360@361@362@364@365@370@371@372@373@375@377@378@394@395"},
            {"1550626740000", "7@9@11@12@14@16@18@19@20@21@22@23@24@25@27@29@31@33@34@35@36@37@39@41@43@44@47@48@49@51@54@55@56@57@59@60@62@64@66@68@72@74@76@77@78@79@81@84@85@88@89@92@93@95@96@97@102@104@105@106@108@109@110@112@113@115@117@119@120@121@122@125@126@128@129@131@132@134@135@136@137@138@140@141@142@143@145@147@148@149@151@152@153@154@155@157@158@160@161@163@164@165@166@168@169@170@171@172@173@174@176@178@179@181@182@185@186@188@190@192@194@196@197@198@199@201@203@204@206@207@208@210@212@213@215@217@218@220@221@222@223@225@226@228@229@230@232@233@234@235@238@239@240@241@243"},
            {"1550755260000", "1@2@3@9@10@11@12@16@18@20@22@23@24@25@26@27@28@31@33@35@37@38@39@40@42@44@45@47@48@49@50@51@53@55@56@60@61@63@66@67@68@69@71@72@74@76@78@80@84@86@88@89@90@91@93@96@97@100@101@104@105@107@108@109@115@117@118@119@121@122@123@125@126@128@130@132@133@134@135@138@139@140@142@143@144@150@151@157@158@159@160@162@169@170@171@173@175@176@177@178@181@182@206@207@221@222@223@226@227@232@234@240@242@255@256@257@259@260@261@262@265@266@267@268@270"},
            {"1550841420000", "1@2@3@4@5@6@8@9@11@12@16@18@20@22@23@24@25@26@27@28@29@31@33@41@43@44@45@46@47@49@51@52@56@57@59@62@63@64@65@67@68@70@72@74@76@80@82@84@85@86@87@89@92@93@96@97@100@101@103@104@105@111@113@114@115@117@118@119@121@122@124@126@128@129@130@131@135@136@138@142@143@152@153@156@157@162@164@171@172@179@180@187@188@192@193@195@196@198@199@200@202@204@205@207@209@210@211@212@213@215@221@222@223@225@227@228@242@243@244@246@247@248@249@252@253@254@255@257"},
            {"1550937540000", "1@2@3@4@5@6@7@8@10@11@13@14@15@16@18@19@23@25@27@29@30@31@32@33@34@35@36@38@40@42@44@45@47@48@50@51@52@53@54@56@58@59@63@64@66@69@70@71@72@74@75@77@79@81@83@87@89@91@92@93@94@96@99@100@103@104@106@107@110@111@112@118@120@121@122@124@125@126@128@129@131@133@135@136@137@138@141@142@146@147@148@150@153@154@155@158@159@162@163@165@166@168@169@170@172@173@175@176@177@178@180@183@187@188@189@191@199@200@202@203@205@206@207@208@209@211@217@218@219@221@223@224@229@235@236@237@239@241@242@244@245@246@254@255@258@259@260@261@263"}
        };

        Dictionary<string, string> dict178 = new Dictionary<string, string>()
{
            {"1550102400000", "" },
            {"1550218380000","61@62@73@74@75@78@79@81@82@91@92@99@100@101@102@104@106@107@117@119@120@122@123@124@133@134@135@136@140@141@142@143@145@147@148@149@150@151@152@154@157@158@159@160@161@163@166@167@170@171@172@173@175@176@177@192@193@194@195@196@197@200@201@203@204@206@209@210@211@212@215@216@217@218@221@222@223@242@243@250@251@264@265@266@267@268@271@272@273@274@275@277@281@282" },
            {"1550334180000", "1@2@3@7@9@11@13@14@15@16@17@18@19@20@22@23@25@26@28@29@30@31@33@34@35@36@38@41@42@43@47@50@52@54@55@56@57@58@63@64@65@67@68@69@72@74@79@80@87@88@89@90@92@95@96@97@98@100@102@103@104@105@107@108@110@113@114@115@116@118@119@120@123@124@125@128@130@131@132@135@136@142@145@147@148@149@150@153@155@156@157@159@162@163@164@165@166@168@170@175@176@181@182@188@189"},
            {"1550403060000", "1@2@3@8@10@12@14@15@16@17@18@19@20@21@23@24@26@27@29@30@31@32@34@35@36@37@39@42@43@44@48@51@53@55@56@57@58@59@64@65@66@68@69@70@86@87@88@89@91@93@94@99@100@105@106@119@120@121@122@123@148@149@152@153@161@162"},
            {"1550488440000", "1@2@3@4@8@10@12@14@15@16@17@18@19@20@21@23@27@29@30@32@33@34@35@37@38@39@40@42@45@46@47@51@54@56@58@59@60@61@62@67@68@69@71@72@73@75@76@78@81@83@84@89@90@91@92@94@96@97@101@104@105@106@107@110@111@112@113@114@116@118@120@122@124@127@129@130@132@133@134@136@137@141@142@143@144@145@148@149@150@151@153@155@156@157@158@159@160@162@165@166@167@168@169@171@174@175@184@185"},
            {"1550576280000", "1@2@3@4@13@15@17@19@20@21@22@23@24@25@26@28@29@31@32@34@35@36@37@39@40@41@42@44@47@48@49@57@60@62@64@65@66@67@68@73@74@75@77@78@79@83@84@86@89@91@92@104@105@115@116@117@118@120@135@136@138@139@140@143@144@145@148@150@151@163@164@165@166@169@172@173@174@175@178@179@180"},
            {"1550659560000", "17@19@21@23@24@25@26@27@28@29@30@32@54@55@57@62@63@65@70@71@72@74@75@76@80@82@83"},
            {"1550772600000", "1@2@3@8@9@10@18@20@22@24@25@26@27@28@29@30@31@33@36@38@40@42@43@44@45@46@47@48@49@51@52@54@55@57@58@59@60@62@63@64@65@67@70@71@72@76@78@79@81@84@86@88@89@93@94@101@102@103@105@106@107@111@112@114@117@119@120@122@126@130@131@132@141@142@164@165@168@169@171@173@176@177@178@179@181@186@193@194@200@201@202@203@204@218@220@282@283@284@288@289@290"},
            {"1550831040000", "1@2@3@4@6@7@9@10@29@31@33@35@36@37@38@39@40@41@42@44@46@48@50@51@53@54@55@56@58@59@60@61@63@66@67@68@72@74@75@77@80@82@84@85@87@88@89@95@96@97@99@100@101@105@106@108@111@113@114@116@120@123@124@125@126@129@130@132@133@138@139@140@142@143@145@147@150@151@152@153@155@157@160@161@165@166@167@169@170@171@174@175@176@179@181@182@185@186@187@190@215@216@217@218@219@221@224@225@226@227@230@231@232@242@243@244@245@246@247@249@250@252@254@255@257@258@260@262@264@272@273@274"},
            {"1550920500000", "1@2@3@4@6@7@9@10@29@31@33@35@36@37@38@39@40@41@42@44@46@48@50@51@53@54@55@56@58@59@60@61@63@66@67@68@72@74@75@82@84@86@87@88@94@95@96@98@99@100@104@105@107@110@112@113@115@120@121@122@123@125@126@127@129@130@135@136@138@139@141@143@146@147@148@149@151@153@156@157@169@171@172@175@176@186@187@191@192@198@199@234@235@238@239@240@242@243@244@247@248@249@252@254@255@258@259@260@263@264@265@266@267@269@270@272@273@278@279@281@283@288@289@290@291@292@294@297@298@299@300@303@304@305@306@308@309@310@312@314@323@324"}
        };

        // 抓取相對應的dictValue
        var chooseDict = "dict" + Session["PatientID"].ToString();
        var getContentList_Time_index = 0; //判斷選擇的時間:dictionary的index值
        var dictValue = "";

        if (chooseDict == "dict321")
        {
            dictValue = dict321.FirstOrDefault(x => x.Key == ViewBag.SearchTime).Value;
            getContentList_Time_index = dict321.Keys.ToList().IndexOf(ViewBag.SearchTime);
        }
        else if (chooseDict == "dict574" || chooseDict == "dict000" )
        {
            dictValue = dict574.FirstOrDefault(x => x.Key == ViewBag.SearchTime).Value;
            getContentList_Time_index = dict574.Keys.ToList().IndexOf(ViewBag.SearchTime);
        }
        else if (chooseDict == "dict154")
        {
            dictValue = dict154.FirstOrDefault(x => x.Key == ViewBag.SearchTime).Value;
            getContentList_Time_index = dict154.Keys.ToList().IndexOf(ViewBag.SearchTime);
        }
        else if (chooseDict == "dict178")
        {
            dictValue = dict178.FirstOrDefault(x => x.Key == ViewBag.SearchTime).Value;
            getContentList_Time_index = dict178.Keys.ToList().IndexOf(ViewBag.SearchTime);
        }



        string[] gramList = dictValue.Split('@');

        var strlenCount = 0;
        var preText = "";
        var totalCount = 0;
        var countColor = 0;
        var countRow = 0;
        var countRowColor = 0;
        int[] countRowColorArray = new int[1000];
        var countColorArray = 0;
        var preColorRow = 0;

        var blue = 0;

        //var progressAssesment = 0;




        for (int i = 0; i < Model.Count(); i++)
        {
            var getContentList = (Model.ElementAt(i).TokenSentance).Split('@'); //文字分開
            for (int time = 0; time < getContentList.Count(); time++)
            {
                blue = 0;

                //if blue = 0 變色
                for (int btime = 0; btime < gramList.Count(); btime++)
                {
                    if (totalCount.ToString() == gramList[btime])
                    {
                        blue = 1;
                    }
                }


                var nextWord = 0;
                nextWord = time + 1;
                var nextNextWord = 0;
                nextNextWord = time + 2;
                var pastWord = 0;
                pastWord = time - 1;

                if (nextWord == getContentList.Count())
                {
                    nextWord = time;
                }
                if (nextNextWord == getContentList.Count())
                {
                    nextNextWord = time;
                }
                if (pastWord < 0)
                {
                    pastWord = time;
                }

                if (getContentList[time].IndexOf('★') == 0)
                {
                    countRow = countRow + 1;
                    <br />
                    <br />
                    strlenCount = 0;
                }
                else if (getContentList[time].IndexOf("Assessment") == 0)
                {
                    countRow = countRow + 1;
                    nameStateArray[nameState] = countRow;
                    nameState = nameState + 1;
                    <br />
                    <br />
                    //progressAssesment = 1;
                    strlenCount = 0;
                }
                else if (getContentList[time].IndexOf("Plan") == 0)
                {
                    countRow = countRow + 1;
                    nameCount = nameCount + 1;
                    nameStateArray[nameState] = countRow;
                    nameState = nameState + 1;
                    <br />
                    <br />

                    strlenCount = 0;
                }

                if (blue != 1)
                {
                    string pattern1 = @"(\d\.\D)";
                    string pattern2 = @"^([A-Z]:+)$";
                    string pattern3 = @"^([a-z]:+)$";
                    if (Regex.IsMatch(getContentList[time] + getContentList[nextWord], pattern1) ||
                        Regex.IsMatch(getContentList[time] + getContentList[nextWord], pattern2) ||
                        Regex.IsMatch(getContentList[time] + getContentList[nextWord], pattern3))
                    {
                        countRow = countRow + 1;
                        <br />
                        <br />
                        strlenCount = 0;
                    }

                    if ((strlenCount + getContentList[time].Length) < 80)
                    {
                        strlenCount = strlenCount + getContentList[time].Length + 1;
                    }
                    else
                    {
                        countRow = countRow + 1;
                        strlenCount = 0;
                        <br />
                        strlenCount = getContentList[time].Length + 1;
                    }

                    if ((getContentList[time] + " " + getContentList[nextWord]).IndexOf("Present Illness") == 0 ||
                        (getContentList[time] + " " + getContentList[nextWord]).IndexOf("-- -") == 0 ||
                        (getContentList[time] + " " + getContentList[nextWord]).IndexOf("Chief Complaints") == 0 ||
                        (getContentList[time] + " " + getContentList[nextWord]).IndexOf("Assessment and") == 0)
                    {
                        countRow = countRow + 1;
                        <br />
                        <br />
                        strlenCount = 0;
                    }
                    else if ((getContentList[time] + " " + getContentList[nextWord]).IndexOf("■ Diagnostic") == 0 ||
                             (getContentList[time] + " " + getContentList[nextWord]).IndexOf("■ Educational") == 0 ||
                             (getContentList[time] + " " + getContentList[nextWord]).IndexOf("■ Therapeutic") == 0 ||
                             (getContentList[time] + " " + getContentList[nextWord]).IndexOf("■ Assessment") == 0 ||
                             (getContentList[time].IndexOf("Subjective")) == 0 ||
                             (getContentList[time] + " " + getContentList[nextWord]).IndexOf("-- -") == 0 ||
                             getContentList[time].IndexOf("Objective") == 0)
                    {
                        countRow = countRow + 1;
                        nameStateArray[nameState] = countRow;
                        nameState = nameState + 1;
                        <br />
                        <br />
                        strlenCount = 0;
                    }
                    else if ((getContentList[time] + " " + getContentList[nextWord]).IndexOf("Plan None") == 0)
                    {
                        countRow = countRow + 1;
                        nameStateArray[nameState] = countRow;
                        nameState = nameState + 1;
                        <br />

                        strlenCount = 0;
                    }
                    else if ((getContentList[time] + " " + getContentList[nextWord]).IndexOf("Problem") == 0)
                    {
                        countRow = countRow + 1;
                        <br />
                        <br />
                        strlenCount = 0;
                    }

                    //印東西
                    //checkStopMark = 1 不變色
                    var checkStopMark = 0;
                    if (getContentList[time] != "None")
                    {
                        //偵測停字
                        for (int stopMarkCount = 0; stopMarkCount < stopWordList.Count(); stopMarkCount++)
                        {
                            if (getContentList[time] == stopWordList[stopMarkCount])
                            {
                                checkStopMark = 1;
                            }
                        }
                        //偵測特殊字元
                        for (int questionMark = 0; questionMark < questionMarkList.Count(); questionMark++)
                        {
                            if (getContentList[time] == questionMarkList[questionMark].ToString())
                            {
                                checkStopMark = 1;
                            }
                        }
                        //偵測欄位字
                        for (int titleNameCount = 0; titleNameCount < titleName.Count(); titleNameCount++)
                        {
                            if ((getContentList[time] + " " + getContentList[nextWord]).IndexOf(titleName[titleNameCount]) == 0)
                            {
                                checkStopMark = 1;
                            }
                        }
                        //偵測SOAP
                        for (int titleNameCount = 0; titleNameCount < soapName.Count(); titleNameCount++)
                        {
                            if (getContentList[time] == soapName[titleNameCount])
                            {
                                checkStopMark = 1;
                            }
                        }
                        //偵測中文編碼不變色
                        for (int c = 0; c < getContentList[time].Length; c++)
                        {
                            if ((int)getContentList[time][c] > 127) //ASCII碼判斷，如果大於127就是中文
                            {
                                checkStopMark = 1;
                            }
                        }

                        if (checkStopMark == 1)
                        {
                            var printWord = getContentList[time] + " ";
                            @printWord
                            checkStopMark = 0; //歸零
                        }
                        else
                        {
                            string color = "blue";
                            if (getContentList_Time_index == 0) //查找dict的index是否為0，代表是病歷的第一筆
                            {
                                color = "black";
                            }

                            countColor++;
                            countRowColor = countRow;
                            if (countRowColor != preColorRow)
                            {
                                countRowColorArray[countColorArray] = countRowColor;
                                countColorArray = countColorArray + 1;
                            }
                            preColorRow = countRowColor;
                            var printWord = "";
                            printWord = getContentList[time] + " ";

                            <font color="@color">
                                @printWord
                            </font>

                        }
                    }

                    //單詞後面空格
                    //admin
                    if ((getContentList[pastWord] + " " + getContentList[time]).IndexOf("Present Illness") == 0 ||
                       (getContentList[pastWord] + " " + getContentList[time]).IndexOf("Chief Complaints") == 0)
                    {
                        countRow = countRow + 1;
                        <br />
                        <br />
                        strlenCount = 0;
                    }
                    else if ((getContentList[pastWord] + " " + getContentList[time]).IndexOf("and plan") == 0)
                    {
                        <br />
                        <br />
                        strlenCount = 0;
                    }
                    else if ((getContentList[pastWord] + " " + getContentList[time]).IndexOf("■ Assessment") == 0 ||
                             (getContentList[pastWord] + " " + getContentList[time]).IndexOf("Assessment") == 0)
                    {
                        countRow = countRow + 1;
                        nameCount = nameCount + 1;
                        <br />
                        <br />
                        strlenCount = 0;
                    }
                    else if ((getContentList[pastWord] + " " + getContentList[time]).IndexOf("Diagnostic plan") == 0 ||
                            (getContentList[pastWord] + " " + getContentList[time]).IndexOf("-Diagnostic plan") == 0 ||
                            (getContentList[pastWord] + " " + getContentList[time]).IndexOf("Therapeutic plan") == 0 ||
                            (getContentList[pastWord] + " " + getContentList[time]).IndexOf("-Therapeutic plan") == 0 ||
                            (getContentList[pastWord] + " " + getContentList[time]).IndexOf("Educational plan") == 0 ||
                            (getContentList[pastWord] + " " + getContentList[time]).IndexOf("Educationa plan") == 0 ||
                            (getContentList[pastWord] + " " + getContentList[time]).IndexOf("Education plan") == 0 ||
                            (getContentList[pastWord] + " " + getContentList[time]).IndexOf("-Educational plan") == 0 ||
                            (getContentList[pastWord] + " " + getContentList[time]).IndexOf("-Educationa plan") == 0 ||
                            (getContentList[pastWord] + " " + getContentList[time]).IndexOf("-Education plan") == 0)
                    {
                        countRow = countRow + 1;
                        nameCount = nameCount + 1;
                        nameStateArray[nameState] = countRow - 1;
                        nameState = nameState + 1;
                        <br />
                        <br />
                        strlenCount = 0;
                    }
                    else if (getContentList[time].IndexOf("Subjective") == 0 ||
                             getContentList[time].IndexOf("Objective") == 0)
                    {
                        countRow = countRow + 1;
                        nameCount = nameCount + 1;
                        <br />
                        <br />
                        strlenCount = 0;
                    }

                    if (getContentList[time].IndexOf("**") == 0)
                    {
                        countRow++;
                        <br />
                        <br />
                        strlenCount = 0;
                    }

                    //progress Plan後空行
                    if (getContentList[time].IndexOf("Plan") == 0)
                    {
                        strlenCount = 0;
                        //progressAssesment = 0;
                    }

                }

                //不變色的
                else
                {
                    string pattern1 = @"(\d\.\D)";
                    string pattern2 = @"^([A-Z]:+)$";
                    string pattern3 = @"^([a-z]:+)$";
                    if (Regex.IsMatch(getContentList[time] + getContentList[nextWord], pattern1) ||
                       Regex.IsMatch(getContentList[time] + getContentList[nextWord], pattern2) ||
                       Regex.IsMatch(getContentList[time] + getContentList[nextWord], pattern3))
                    {
                        countRow = countRow + 1;
                        <br />
                        <br />
                        strlenCount = 0;
                    }

                    int checkStopMark = 0;
                    //偵測欄位字
                    for (int titleNameCount = 0; titleNameCount < titleName.Count(); titleNameCount++)
                    {
                        if ((getContentList[time] + " " + getContentList[nextWord]).IndexOf(titleName[titleNameCount]) == 0)
                        {
                            checkStopMark = 1;
                        }
                    }
                    //偵測SOAP
                    for (int titleNameCount = 0; titleNameCount < soapName.Count(); titleNameCount++)
                    {
                        if (getContentList[time] == soapName[titleNameCount])
                        {
                            checkStopMark = 1;
                        }
                    }

                    if ((strlenCount + getContentList[time].Length) < 80)
                    {
                        strlenCount = strlenCount + getContentList[time].Length + 1;
                    }
                    else
                    {
                        strlenCount = 0;
                        countRow++;
                        <br />
                        strlenCount = getContentList[time].Length + 1;
                    }

                    //admin
                    if ((getContentList[time] + " " + getContentList[nextWord]).IndexOf("Present Illness") == 0 ||
                       (getContentList[time] + " " + getContentList[nextWord]).IndexOf("Chief Complaints") == 0)
                    {
                        countRow++;
                        <br />
                        strlenCount = 0;
                    }
                    else if ((getContentList[time] + " " + getContentList[nextWord]).IndexOf("Assessment and") == 0)
                    {
                        countRow++;
                        <br />
                        <br />
                        strlenCount = 0;
                    }
                    else if ((getContentList[time] + " " + getContentList[nextWord]).IndexOf("■ Assessment") == 0 ||
                            (getContentList[time] + " " + getContentList[nextWord]).IndexOf("■ Diagnostic") == 0 ||
                            (getContentList[time] + " " + getContentList[nextWord]).IndexOf("■ Educational") == 0 ||
                            (getContentList[time] + " " + getContentList[nextWord]).IndexOf("■ Therapeutic") == 0 ||
                            (getContentList[time] + " " + getContentList[nextWord]).IndexOf("-- -") == 0)
                    {
                        countRow++;
                        nameStateArray[nameState] = countRow;
                        nameState++;
                        <br />
                        <br />
                        strlenCount = 0;
                    }
                    //progress
                    else if (getContentList[nextWord].IndexOf("Subjective") == 0 ||
                            (getContentList[time] + " " + getContentList[nextWord]).IndexOf("-- -") == 0)
                    {
                        countRow++;
                        nameStateArray[nameState] = countRow;
                        nameState++;
                        <br />
                        <br />
                        strlenCount = 0;
                    }
                    else if (getContentList[time].IndexOf("Objective") == 0)
                    {
                        countRow++;
                        nameStateArray[nameState] = countRow;
                        nameState++;
                        <br />

                        strlenCount = 0;
                    }
                    else if ((getContentList[time] + " " + getContentList[nextWord]).IndexOf("Plan None") == 0 ||
                          (getContentList[time] + " " + getContentList[nextWord]).IndexOf("Problem") == 0)
                    {
                        countRow++;
                        nameStateArray[nameState] = countRow;
                        nameState++;
                        <br />
                        <br />
                        strlenCount = 0;
                    }

                    //印東西
                    if (getContentList[time] != "None")
                    {
                        var printWord = getContentList[time] + " ";
                        @printWord
                    }

                    //字詞後空行
                    //admin
                    if ((getContentList[pastWord] + " " + getContentList[time]).IndexOf("Present Illness") == 0 ||
                        (getContentList[pastWord] + " " + getContentList[time]).IndexOf("Chief Complaints") == 0)
                    {
                        countRow++;
                        <br />
                        strlenCount = 0;
                    }
                    else if ((getContentList[pastWord] + " " + getContentList[time]).IndexOf("and plan") == 0 ||
                            (getContentList[pastWord] + " " + getContentList[time]).IndexOf("■ Assessment") == 0)
                    {
                        countRow++;
                        <br />
                        <br />
                        strlenCount = 0;
                    }
                    else if ((getContentList[pastWord] + " " + getContentList[time]).IndexOf("Assessment") == 0)
                    {
                        countRow++;
                        nameCount++;
                        nameStateArray[nameState] = countRow;
                        nameState = nameState + 1;
                        <br />
                        <br />
                        strlenCount = 0;
                    }
                    else if ((getContentList[pastWord] + " " + getContentList[time]).IndexOf("Diagnostic plan") == 0 ||
                             (getContentList[pastWord] + " " + getContentList[time]).IndexOf("-Diagnostic plan") == 0 ||
                             (getContentList[pastWord] + " " + getContentList[time]).IndexOf("-Educational plan") == 0 ||
                             (getContentList[pastWord] + " " + getContentList[time]).IndexOf("-Education plan") == 0 ||
                             (getContentList[pastWord] + " " + getContentList[time]).IndexOf("Educational plan") == 0 ||
                             (getContentList[pastWord] + " " + getContentList[time]).IndexOf("Education plan") == 0 ||
                             (getContentList[pastWord] + " " + getContentList[time]).IndexOf("Therapeutic plan") == 0 ||
                             (getContentList[pastWord] + " " + getContentList[time]).IndexOf("-Therapeutic plan") == 0)
                    {
                        countRow++;
                        nameCount++;
                        nameStateArray[nameState] = countRow - 1;
                        nameState = nameState + 1;
                        <br />
                        <br />
                        strlenCount = 0;
                    }
                    //progress
                    else if (getContentList[time].IndexOf("Subjective") == 0)
                    {
                        countRow++;
                        nameCount++;
                        <br />
                        <br />
                        strlenCount = 0;
                    }
                    else if (getContentList[time].IndexOf("Objective") == 0)
                    {
                        countRow++;
                        nameCount++;
                        <br />
                        strlenCount = 0;
                    }
                    else if ((getContentList[pastWord] + " " + getContentList[time]).IndexOf("Plan None") == 0)
                    {
                        countRow++;
                        <br />
                        <br />
                        strlenCount = 0;
                    }

                    //Progress Plan後空行
                    if (getContentList[time].IndexOf("Plan") == 0)
                    {
                        <br />
                        <br />
                        nameCount++;
                        strlenCount = 0;
                        //progressAssesment = 0;
                    }

                    //Assessment
                    if (getContentList[time].IndexOf("**") == 0)
                    {
                        <br />
                        <br />
                        strlenCount = 0;
                    }

                    preText = getContentList[time];

                }

                totalCount = totalCount + 1;

            }
        }
    }
    catch (Exception e)
    {
        <h2 style="text-align:center"> 這個時間點沒有病歷喔!</h2>
    }



}
